@NonCPS
boolean isMyDirChanged() {
  for (changeLogSet in currentBuild.changeSets) { 
    for (entry in changeLogSet.getItems()) { // for each commit in the detected changes
      for (file in entry.getAffectedFiles()) {
        println(file.getPath() + ":lafa;sdlifjadoifj")
        if (file.getPath().matches("src/frontend(/.*)")) {
          println("Hey it worked")
          return true
        }
      }
    }
  }
  return false
} 


node {

    def app

    def SCANNER_HOME = tool 'sonar-scanner'

    stage('Clone repository') {
      

        checkout scm
    }

    stage('Build image') {
       if (isMyDirChanged()) {
          app = docker.build("wpatterson134/frontend", "-f ./src/frontend/Dockerfile ./src/frontend")
        } else {
            currentBuild.result = "SUCCESS"
            return
    }
}
    if (currentBuild.result == "SUCCESS") {
        return
    }

    stage('Test image') {
  
withSonarQubeEnv(installationName: 'sonar') {
        
        sh "$SCANNER_HOME/bin/sonar-scanner \
            -Dsonar.projectKey=frontend-buildimage \
            -Dsonar.projectName=frontend-buildimage \
            -Dsonar.source=. \
            -Dsonar.nodejs.executable=/root/.nvm/versions/node/v20.13.0/bin/node \
            -Dsonar.java.binaries=."
      }
    }

    stage('Push image') {
        
        docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
            app.push("${env.BUILD_NUMBER}")
        }
    }
    
    stage('Trigger ManifestUpdate') {
                echo "triggering updatemanifestjob"
                build job: 'frontend-updatemanifest', parameters: [string(name: 'DOCKERTAG', value: env.BUILD_NUMBER)]
        }
}
